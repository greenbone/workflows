name: Build & Push Feed Data Container Image

on:
  workflow_call:
    inputs:
      feed-type:
        description: "Use Feed Type, iff required. ['community', 'membership', 'enterprise']. 'community' will be pushed to DockerHub."
        type: string
        required: false
        default: 'community'
      dockerfile-path:
        description: "Path to the Dockerfile to use. Default: .docker/Dockerfile"
        type: string
        default: '.docker/Dockerfile'
    secrets:
      GREENBONE_BOT:
        required: true
      GREENBONE_BOT_PACKAGES_WRITE_TOKEN:
        required: true
      GREENBONE_BOT_TOKEN:
        required: true
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true

jobs:
  build-and-upload-container:
    name: Build and upload a feed data container
    runs-on: ubuntu-latest

    steps:
      - name: Fail if inputs.feed-type is invalid
        if: (inputs.feed-type != 'community' && inputs.feed-type != 'enterprise' && inputs.feed-type != 'membership')
        run: exit 1
      - name: Get repository name
        run: |
          echo "REPOSITORY="$(echo ${{ github.repository }} | cut -d '/' -f 2)"" >> $GITHUB_ENV
      - name: Echo $REPOSITORY
        run: echo ${{ env.REPOSITORY }}
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Gather version
        uses: greenbone/actions/reference-version@v2
      - name: Login to Docker Registry
        # publish to dockerhub for community main
        if: github.event_name != 'pull_request' && (inputs.feed-type == 'community') && github.ref_name == 'main'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        # publish to github for community staging, enterprise main and enterprise staging
        if: github.event_name != 'pull_request' && (inputs.feed-type != 'community' || github.ref_name != 'main')
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GREENBONE_BOT }}
          password: ${{ secrets.GREENBONE_BOT_PACKAGES_WRITE_TOKEN }}
      - name: Setup licenses
        run: |
          if [ "${{ inputs.feed-type }}" = "community" ]; then
            echo "LICENSES='AGPL-3.0-only AND ODbL-1.0'" >> $GITHUB_ENV
          else
            echo "LICENSES='NOASSERTION'" >> $GITHUB_ENV
          fi
      - name: Setup container meta information
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            name=${{ github.repository }},enable=${{ inputs.feed-type == 'community' }} && ${{ github.ref_name == 'main' }}
            name=ghcr.io/${{ github.repository }},enable= (${{ inputs.feed-type == 'community' }} && ${{ github.ref_name !=  'main' }}) || ${{ inputs.feed-type == 'enterprise' }}
          labels: |
            org.opencontainers.image.vendor=Greenbone
            org.opencontainers.image.base.name=busybox:stable
            org.opencontainers.image.licenses=${{ env.LICENSES }}
          flavor: latest=false # no latest container tag for git tags
          # tags: enterprise, enterprise-staging, community, community-staging, latest == community
          tags: |
            type=raw,value=${{ inputs.feed-type }},enable=${{ github.ref_name ==  'main' }}
            type=raw,value=${{ inputs.feed-type }}-${{ github.ref_name }},enable=${{ github.ref_name != 'main' }}
            type=raw,value=latest,enable=${{ github.ref_name == 'main' && inputs.feed-type == 'community' }}
      - name: Download deployment artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.REPOSITORY }}-${{ inputs.feed-type }}-${{ github.ref_name }}
      - name: Extract report formats from deployment artifact
        run: |
          mkdir -p /tmp/context/${{ env.REPOSITORY }} /tmp/extract
          tar -xvJf ${{ env.REPOSITORY }}-${{ inputs.feed-type }}-${{ github.ref_name }}.tar.xz -C /tmp/extract
          mv /tmp/extract/${{ inputs.feed-type }}/data-feed/* /tmp/context/${{ env.REPOSITORY }}/
          for RELEASE in "20.08" "21.04"; do
            mv /tmp/context/${{ env.REPOSITORY }}/$RELEASE/${{ env.REPOSITORY }} /tmp/context/${{ env.REPOSITORY }}/$RELEASE/report_formats
          done
      - name: Copy container image init script
        run: cp .docker/init.sh /tmp/context
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push Container image
        uses: docker/build-push-action@v4
        with:
          context: /tmp/context/
          push: ${{ github.event_name != 'pull_request' }}
          file: ${{ inputs.dockerfile-path }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Container signing
        uses: greenbone/actions/container-signing@v2
        with:
          image-tags: ${{ steps.meta.outputs.tags }}
          image-digest: ${{ steps.build-and-push.outputs.digest }}
