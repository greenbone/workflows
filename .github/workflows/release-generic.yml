name: Release

on:
  workflow_call:
    inputs:
      git-tag-prefix:
        description: "Set git tag prefix to the passed input. Default: 'v'"
        default: "v"
        type: string
      release-type:
        description: "Release type. One of alpha, patch, minor, major, release-candidate and calendar"
        type: string
      release-version:
        description: "Set an explicit version, that will overwrite release-type. Fails if version is not compliant."
        type: string
      versioning-scheme:
        description: "Versioning Scheme to use."
        default: "semver"
        type: string
      update-project:
        description: "Update version in project files like `pyproject.toml`. Default is 'true'."
        default: "true"
        type: string
      next-version:
        description: "Set an explicit version that should be used after the release. Leave empty for determining the next version automatically. Set to 'false' for not updating the version after a release."
        type: string
      github-pre-release:
        description: "Set to `'true'` to enforce uploading the release to GitHub as a pre-release"
        type: string
    secrets:
      GREENBONE_BOT:
        required: true
      GREENBONE_BOT_MAIL:
        required: true
      GREENBONE_BOT_TOKEN:
        required: true
      GPG_KEY:
        required: false
      GPG_FINGERPRINT:
        required: false
      GPG_PASSPHRASE:
        required: false

jobs:
  build-and-release:
    name: Create a new release
    # If the event is a workflow_dispatch or on of the labels 'pre release',
    # 'patch release', 'minor release' or 'major release' is set and PR is
    # closed because of a merge
    # NOTE: priority of set labes will be alpha > release-candidate > patch > minor > major,
    #       so if 'major' and 'patch' labes are set, it will create a patch release.
    # make relase is supported for creating calendar releases
    if: |
      ( github.event_name == 'workflow_dispatch') || (
        ( contains(github.event.pull_request.labels.*.name, 'alpha release') ||
          contains(github.event.pull_request.labels.*.name, 'rc release') ||
          contains(github.event.pull_request.labels.*.name, 'patch release') ||
          contains(github.event.pull_request.labels.*.name, 'make release') ||
          contains(github.event.pull_request.labels.*.name, 'calendar release') ||
          contains(github.event.pull_request.labels.*.name, 'minor release') ||
          contains(github.event.pull_request.labels.*.name, 'major release')) &&
          github.event.pull_request.merged == true )
    runs-on: 'ubuntu-latest'
    steps:
      - uses: greenbone/actions/release-type@v3
        id: release-type
        with:
          release-type-input: ${{ inputs.release-type }}
      - name: Release with release action
        uses: greenbone/actions/release@v3
        with:
          git-tag-prefix: ${{ inputs.git-tag-prefix }}
          github-user: ${{ secrets.GREENBONE_BOT }}
          github-user-mail: ${{ secrets.GREENBONE_BOT_MAIL }}
          github-user-token: ${{ secrets.GREENBONE_BOT_TOKEN }}
          gpg-key: ${{ secrets.GPG_KEY }}
          gpg-fingerprint: ${{ secrets.GPG_FINGERPRINT }}
          gpg-passphrase: ${{ secrets.GPG_PASSPHRASE }}
          release-type: ${{ steps.release-type.outputs.release-type }}
          release-version: ${{ inputs.release-version }}
          ref: ${{ steps.release-type.outputs.release-ref }}
          versioning-scheme: ${{ inputs.versioning-scheme }}
          update-project: ${{ inputs.update-project }}
          next-version: ${{ inputs.next-version }}
          github-pre-release: ${{ inputs.github-pre-release }}
