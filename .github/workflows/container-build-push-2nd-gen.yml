name: Sensor Build and Push

on:
  workflow_call:
    inputs:
      ref-name:
        description: "The ref to build a container image from. For example a tag v23.0.0."
        default: ${{ github.ref_name }}
        type: string
      build-context:
        description: "Path to image build context. Default is ."
        default: .
        type: string
      build-docker-file:
        description: "Path to the docker file. Default is .docker/prod.Dockerfile"
        default: .docker/prod.Dockerfile
        type: string
      image-labels:
        description: "Image labels."
        required: true
        type: string
      image-url:
        description: "Image url/name without registry."
        required: true
        type: string
      notify:
        description: "Enable mattermost notify. Default is true"
        default: "true"
        type: string
      artifact-name:
        description: "The artifact name to download."
        required: false
        type: string
      artifact-path:
        description: "The artifact path to extract the artifact into."
        required: false
        type: string
      data-container:
        description: "true or false string, indicating whether the given image is a data container."
        required: false
        default: "false"
        type: string
      feed-info:
        description: "Timestamp of the data container build (required if data-container is true)"
        required: false
        type: string
        
    secrets:
      COSIGN_KEY_OPENSIGHT:
        required: false
      COSIGN_KEY_PASSWORD_OPENSIGHT:
        required: false
      DOCKERHUB_USERNAME:
        required: false
      DOCKERHUB_TOKEN:
        required: false
      GREENBONE_REGISTRY:
        required: false
      GREENBONE_REGISTRY_USER:
        required: false
      GREENBONE_REGISTRY_TOKEN:
        required: false
      MATTERMOST_WEBHOOK_URL:
        required: false

# INFO
# We cannot use a matrix here because job outputs from matrix jobs cannot be passed to other jobs.
# Due to cosign and the use of native runners, we cannot use the platform build mode from buildx anymore.
# This means we have to build our own multi-arch manifest.

jobs:
  build-amd64:
    runs-on: self-hosted-generic
    outputs:
      digest: ${{ steps.build-and-push.outputs.digest }}
      tags: ${{ steps.build-and-push.outputs.tags }}
      annotations: ${{ steps.build-and-push.outputs.annotations }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: ${{ inputs.ref-name }}

      - uses: actions/download-artifact@v4
        if: inputs.artifact-name
        with:
          name: ${{ inputs.artifact-name }}
          path: ${{ inputs.artifact-path }}

      - uses: greenbone/actions/is-latest-tag@v3
        id: latest
        with:
          tag-name: ${{ inputs.ref-name }}

      - name: Set container build options
        id: container-opts
        run: |
          if [[ "${{ github.ref_type }}" = 'tag' ]]; then
            echo "version=stable" >> $GITHUB_OUTPUT
            echo "gvm-libs-version=oldstable" >> $GITHUB_OUTPUT
          elif [[ "${{ inputs.data-container }}" = 'true' ]]; then
            echo "version=latest" >> $GITHUB_OUTPUT
          else
            echo "version=edge" >> $GITHUB_OUTPUT
            echo "gvm-libs-version=oldstable-edge" >> $GITHUB_OUTPUT
          fi

      - name: Set data container tags
        id: set-data-container-tags
        uses: docker-metadata-action@v5
        if: ${{ inputs.data-container == "true" }}
        with:
          images: |
            name=${{ inputs.image-url }}
          tags: |
            type=raw,value=community
            type=raw,value=latest
            type=raw,value=${{ inputs.feed-info }}           

      - name: Container build and push 2nd gen
        id: build-and-push
        uses: greenbone/actions/container-build-push-generic@v3
        with:
          build-context: ${{ inputs.build-context }}
          build-docker-file: ${{ inputs.build-docker-file }}
          build-args: |
            VERSION=${{ steps.container-opts.outputs.version }}
            GVM_LIBS_VERSION=${{ steps.container-opts.outputs.gvm-libs-version }}
            IMAGE_REGISTRY=${{ vars.IMAGE_REGISTRY }}
          image-url: ${{ inputs.image-url }}
          image-labels: ${{ inputs.image-labels }}
          image-tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=edge
            type=raw,value=${{ github.ref_name }},,enable=${{ github.event_name == 'pull_request' }}
            type=raw,value=latest,enable=${{ steps.latest.outputs.is-latest-tag == 'true' }}
            type=raw,value=stable,enable=${{ steps.latest.outputs.is-latest-tag == 'true' }}
            type=raw,value=edge,enable=${{ inputs.ref-name == 'main' }}
            image-platforms: ${{ matrix.platform }}
          registry: ${{ secrets.GREENBONE_REGISTRY }}
          registry-username: ${{ secrets.GREENBONE_REGISTRY_USER }}
          registry-password: ${{ secrets.GREENBONE_REGISTRY_TOKEN }}
          scout-user: ${{ secrets.DOCKERHUB_USERNAME }}
          scout-password: ${{ secrets.DOCKERHUB_TOKEN }}
          scout-command: cves

  build-arm64:
    # At the moment we don't have enough arm runners to provide a run for every PR!
    if: github.event_name != 'pull_request'
    runs-on: self-hosted-generic-arm64
    outputs:
      digest: ${{ steps.build-and-push.outputs.digest }}
      tags: ${{ steps.build-and-push.outputs.tags }}
      annotations: ${{ steps.build-and-push.outputs.annotations }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: ${{ inputs.ref-name }}

      - uses: actions/download-artifact@v4
        if: inputs.artifact-name
        with:
          name: ${{ inputs.artifact-name }}
          path: ${{ inputs.artifact-path }}

      - uses: greenbone/actions/is-latest-tag@v3
        id: latest
        with:
          tag-name: ${{ inputs.ref-name }}

      - name: Set container build options
        id: container-opts
        run: |
          if [[ "${{ github.ref_type }}" = 'tag' ]]; then
            echo "version=stable" >> $GITHUB_OUTPUT
            echo "gvm-libs-version=oldstable" >> $GITHUB_OUTPUT
          elif [[ "${{ inputs.data-container }}" = 'true' ]]; then
            echo "version=latest" >> $GITHUB_OUTPUT
          else
            echo "version=edge" >> $GITHUB_OUTPUT
            echo "gvm-libs-version=oldstable-edge" >> $GITHUB_OUTPUT
          fi

      - name: Container build and push 3rd gen
        id: build-and-push
        uses: greenbone/actions/container-build-push-generic@v3
        with:
          build-context: ${{ inputs.build-context }}
          build-docker-file: ${{ inputs.build-docker-file }}
          build-args: |
            VERSION=${{ steps.container-opts.outputs.version }}
            GVM_LIBS_VERSION=${{ steps.container-opts.outputs.gvm-libs-version }}
            IMAGE_REGISTRY=${{ vars.IMAGE_REGISTRY }}
          image-url: ${{ inputs.image-url }}
          image-labels: ${{ inputs.image-labels }}
          image-tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=edge
            type=ref,event=pr
            type=raw,value=latest,enable=${{ steps.latest.outputs.is-latest-tag == 'true' }}
            type=raw,value=stable,enable=${{ steps.latest.outputs.is-latest-tag == 'true' }}
            type=raw,value=edge,enable=${{ inputs.ref-name == 'main' }}
            image-platforms: ${{ matrix.platform }}
          registry: ${{ secrets.GREENBONE_REGISTRY }}
          registry-username: ${{ secrets.GREENBONE_REGISTRY_USER }}
          registry-password: ${{ secrets.GREENBONE_REGISTRY_TOKEN }}
          scout-user: ${{ secrets.DOCKERHUB_USERNAME }}
          scout-password: ${{ secrets.DOCKERHUB_TOKEN }}
          scout-command: cves

  create-multi-arch-manifest:
    if: github.event_name != 'pull_request'
    runs-on: self-hosted-generic
    needs:
      - build-amd64
      - build-arm64
    steps:
      - name: Create multi arch manifest
        uses: greenbone/actions/container-multi-arch-manifest@v3
        with:
          cosign-key: ${{ secrets.COSIGN_KEY_OPENSIGHT }}
          cosign-key-password: ${{ secrets.COSIGN_KEY_PASSWORD_OPENSIGHT }}
          cosign-tlog-upload: "false"
          annotations: |
            ${{ needs.build-amd64.outputs.annotations }}
            ${{ needs.build-arm64.outputs.annotations }}
          tags: |
            ${{ needs.build-amd64.outputs.tags }}
            ${{ needs.build-arm64.outputs.tags }}
          digests: |
            ${{ needs.build-amd64.outputs.digest }}
            ${{ needs.build-arm64.outputs.digest }}
          url: ${{ inputs.image-url }}
          registry: ${{ secrets.GREENBONE_REGISTRY }}
          registry-username: ${{ secrets.GREENBONE_REGISTRY_USER }}
          registry-password: ${{ secrets.GREENBONE_REGISTRY_TOKEN }}

  notify:
    needs:
      - build-amd64
      - build-arm64
      - create-multi-arch-manifest
    if: ${{ !cancelled() && startsWith(github.ref, 'refs/tags/v')  && startsWith(inputs.notify, 'true') }}
    uses: greenbone/workflows/.github/workflows/notify-mattermost-3rd-gen.yml@main
    with:
      status: ${{ contains(needs.*.result, 'failure') && 'failure' || 'success' }}
    secrets: inherit
